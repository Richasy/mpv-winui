// Copyright (c) Richasy. All rights reserved.
// <auto-generated />

using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Mpv.Core.Enums.Client;
using Mpv.Core.Structs.Client;

namespace Mpv.Core.Interop;

/// <summary>
/// This class is a wrapper for the native mpv client API.
/// </summary>
public partial class MpvClientNative
{
    /// <summary>
    /// Initializes a new instance of the <see cref="MpvClientNative"/> class.
    /// </summary>
    public MpvClientNative()
    {
        Resolver.SetResolver();
        IsCore = true;
        Handle = mpv_create();
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MpvClientNative"/> class.
    /// </summary>
    public MpvClientNative(MpvHandle handle, string name = null, bool isWeakClient = false)
    {
        if (!handle)
        {
            throw new Exception("An MPV core must be initialized first.");
        }

        Resolver.SetResolver();
        IsCore = false;
        name ??= string.Empty;
        Handle = isWeakClient
            ? mpv_create_weak_client(handle, name)
            : mpv_create_client(handle, name);

        if (!Handle)
        {
            throw new Exception("Failed to create a client.");
        }
    }

    /// <summary>
    /// The handle of the current client.
    /// </summary>
    public MpvHandle Handle { get; }

    /// <summary>
    /// Whether it is a core client.
    /// </summary>
    public bool IsCore { get; }

    /// <summary>
    /// The unique name of the current client.
    /// </summary>
    public string Name => mpv_client_name(Handle);

    /// <summary>
    /// The unique id of the current client.
    /// </summary>
    public long Id => mpv_client_id(Handle);

    /// <summary>
    /// Whether the current client is initialized.
    /// </summary>
    public bool IsInitialized { get; private set; }

    /// <summary>
    /// Initialize the current client.
    /// </summary>
    /// <returns><see cref="Task"/>.</returns>
    /// <exception cref="Exception">Initialization failures return an error message.</exception>
    public async Task InitializeAsync()
    {
        var errorCode = MpvError.Success;

        await Task.Run(() =>
        {
            errorCode = mpv_initialize(Handle);
        });

        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to initialize the client. Error code: {errorCode}", CreateError(errorCode));
        }

        IsInitialized = true;
    }

    /// <summary>
    /// Load a config file. This loads and parses the file, and sets every entry in
    /// the config file's default section as if mpv_set_option_string() is called.
    /// </summary>
    /// <param name="filePath">absolute path to the config file on the local filesystem.</param>
    /// <returns><see cref="Task"/>.</returns>
    /// <remarks>
    /// The filename should be an absolute path. If it isn't, the actual path used
    /// is unspecified. (Note: an absolute path starts with '/' on UNIX.) If the
    /// file wasn't found, <see cref="MpvError.InvalidParameter"/> is returned.
    /// If a fatal error happens when parsing a config file, <see cref="MpvError.OptionError"/>
    /// is returned. Errors when setting options as well as other types or errors
    /// are ignored (even if options do not exist). You can still try to capture
    /// the resulting error messages with mpv_request_log_messages(). Note that it's
    /// possible that some options were successfully set even if any of these errors
    /// happen.
    /// </remarks>
    public async Task LoadConfigAsync(string filePath)
    {
        var errorCode = MpvError.Success;
        await Task.Run(() =>
        {
            errorCode = mpv_load_config_file(Handle, filePath);
        });

        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to load the configuration file. Error code: {errorCode}", CreateError(errorCode));
        }
    }

    /// <summary>
    /// 设置选项.
    /// </summary>
    /// <returns>Options.</returns>
    public MpvClientNative SetOption(string name, bool data)
        => SetOption(name, new MpvNode(data));

    /// <summary>
    /// 设置选项.
    /// </summary>
    /// <returns>Options.</returns>
    public MpvClientNative SetOption(string name, long data)
        => SetOption(name, new MpvNode(data));

    /// <summary>
    /// 设置选项.
    /// </summary>
    /// <returns>Options.</returns>
    public MpvClientNative SetOption(string name, double data)
        => SetOption(name, new MpvNode(data));

    /// <summary>
    /// 设置选项.
    /// </summary>
    /// <returns>Options.</returns>
    public MpvClientNative SetOption(string name, MpvNode node)
    {
        var errorCode = mpv_set_option(Handle, name, node.Format, ref node);
        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to set the option. Error code: {errorCode}", CreateError(errorCode));
        }

        return this;
    }

    /// <summary>
    /// 设置选项.
    /// </summary>
    /// <returns>Options.</returns>
    public MpvClientNative SetOption(string name, string data)
    {
        var errorCode = mpv_set_option_string(Handle, name, data);
        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to set the option. Option: {data}", CreateError(errorCode));
        }

        return this;
    }

    public bool GetPropertyToBoolean(string name)
    {
        var flag = GetPropertyToNode(name, MpvFormat.Flag).Flag;
        return flag == 1;
    }

    public long GetPropertyToLong(string name)
        => GetPropertyToNode(name, MpvFormat.Int64).IntegerValue;

    public double GetPropertyToDouble(string name)
        => GetPropertyToNode(name, MpvFormat.Double).DoubleValue;

    public MpvNode GetPropertyToNode(string name, MpvFormat format)
    {
        MpvNode node = default;
        var errorCode = mpv_get_property(Handle, name, format, out node);
        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to get the property. Error code: {errorCode}", CreateError(errorCode));
        }

        return node;
    }

    public string GetPropertyToString(string name)
    {
        var property = mpv_get_property_string(Handle, name);
        return property;
    }

    public MpvClientNative SetProperty(string name, bool data)
        => SetProperty(name, new MpvNode(data));

    public MpvClientNative SetProperty(string name, long data)
        => SetProperty(name, new MpvNode(data));

    public MpvClientNative SetProperty(string name, double data)
        => SetProperty(name, new MpvNode(data));

    public MpvClientNative SetProperty(string name, MpvNode node)
    {
        var errorCode = mpv_set_property(Handle, name, node.Format, ref node);
        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to set the property. Error code: {errorCode}", CreateError(errorCode));
        }

        return this;
    }

    public MpvClientNative SetProperty(string name, string data)
    {
        var errorCode = mpv_set_property_string(Handle, name, data);
        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to set the property. Property: {name}", CreateError(errorCode));
        }

        return this;
    }

    public void ObserveProperty(string name, MpvFormat format, ulong requestId = 0)
        => mpv_observe_property(Handle, requestId, name, format);

    public void UnObserveProperties(ulong requestId = 0)
        => mpv_unobserve_property(Handle, requestId);

    public async Task ExecuteAsync(string[] command)
    {
        var nullTermArray = new string[command.Length + 1];
        Array.Copy(command, nullTermArray, command.Length);
        nullTermArray[^1] = null;
        var errorCode = MpvError.Success;
        await Task.Run(() =>
        {
            try
            {
                errorCode = mpv_command(Handle, nullTermArray);
            }
            catch (Exception)
            {
                errorCode = MpvError.Generic;
            }
        });

        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to execute the command. Error code: {errorCode}", CreateError(errorCode));
        }
    }

    public async Task ExecuteAsync(string command)
    {
        var errorCode = MpvError.Success;
        await Task.Run(() =>
        {
            errorCode = mpv_command_string(Handle, command);
        });

        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to execute the command. Command: {command}", CreateError(errorCode));
        }
    }

    public async Task<MpvNode> ExecuteWithResultAsync(MpvNode command)
    {
        var errorCode = MpvError.Success;
        MpvNode result = default;
        await Task.Run(() =>
        {
            errorCode = mpv_command_node(Handle, ref command, out result);
        });

        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to execute the command. Error code: {errorCode}", CreateError(errorCode));
        }

        return result;
    }

    public async Task<MpvNode> ExecuteWithResultAsync(string[] command)
    {
        var nullTermArray = new string[command.Length + 1];
        Array.Copy(command, nullTermArray, command.Length);
        nullTermArray[^1] = null;
        var errorCode = MpvError.Success;
        MpvNode result = default;
        await Task.Run(() =>
        {
            errorCode = mpv_command_ret(Handle, nullTermArray, out result);
        });

        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to execute the command. Error code: {errorCode}", CreateError(errorCode));
        }

        return result;
    }

    /// <summary>
    /// Destroy the current client or destroy all open clients.
    /// </summary>
    /// <param name="isTerminate"><c>true</c> indicates that destroy all clients.</param>
    public Task DestroyAsync(bool isTerminate = false)
    {
        return Task.Run(() =>
        {
            if (isTerminate || IsCore)
            {
                mpv_terminate_destroy(Handle);
            }
            else
            {
                mpv_destroy(Handle);
            }

            IsInitialized = false;
        });
    }

    public MpvEvent WaitEvent(int timeout = -1)
    {
        return Marshal.PtrToStructure<MpvEvent>(mpv_wait_event(Handle, timeout));
    }

    public void RequestLogMessage(MpvLogLevel level)
    {
        var errorCode = mpv_request_log_messages(Handle, level.ToLogLevel());
        if (errorCode != MpvError.Success)
        {
            throw new Exception($"Failed to request log messages. Error code: {errorCode}", CreateError(errorCode));
        }
    }
}
